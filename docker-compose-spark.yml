services:
#################################################################
# Nessie Postgresql
#################################################################
  nessie-db:
    image: postgres:latest
    container_name: nessie-db
    environment:
      POSTGRES_DB: ${NESSIE_DB_NAME}
      POSTGRES_USER: ${NESSIE_DB_USER}
      POSTGRES_PASSWORD: ${NESSIE_DB_PASSWORD}
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${NESSIE_DB_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "5432:5432"
    volumes:
      - /opt/nessie/data:/var/lib/postgresql/data
    networks:
      - datalakehouse-network

#################################################################
# Nessie
#################################################################
  nessie:
    image: projectnessie/nessie
    container_name: nessie
    ports:
      - "19120:19120"
    environment:
      NESSIE_VERSION_STORE_TYPE: JDBC
      QUARKUS_DATASOURCE_JDBC_URL: jdbc:postgresql://nessie-db:5432/${NESSIE_DB_NAME}
      QUARKUS_DATASOURCE_USERNAME: ${NESSIE_DB_USER}
      QUARKUS_DATASOURCE_PASSWORD: ${NESSIE_DB_PASSWORD}
      # nessie.version.store.type: IN_MEMORY
      nessie.catalog.default-warehouse: warehouse
      nessie.catalog.warehouses.warehouse.location: s3a://warehouse/
      nessie.catalog.service.s3.default-options.endpoint: ${MINIO_HOST}:${MINIO_PORT}
      nessie.catalog.service.s3.default-options.path-style-access: true
      nessie.catalog.service.s3.default-options.access-key: urn:nessie-secret:quarkus:nessie.catalog.secrets.access-key
      nessie.catalog.secrets.access-key.name: ${MINIO_ROOT_USER}
      nessie.catalog.secrets.access-key.secret: ${MINIO_ROOT_PASSWORD}
      nessie.catalog.service.s3.default-options.region: us-east-1
      nessie.server.authentication.enabled: false
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:19120/api/v1/config"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    depends_on:
      nessie-db:
        condition: service_healthy
    networks:
      - datalakehouse-network
      
#################################################################
# spark-iceberg
#################################################################
  spark-iceberg:
    container_name: spark-iceberg
    image: my-spark-iceberg
    build:
      context: spark
      dockerfile: Dockerfile
    environment:
      CATALOG_TYPE: nessie
      NESSIE_URI: ${NESSIE_URI}
      WAREHOUSE: s3a://warehouse/
      AWS_S3_ENDPOINT: ${MINIO_HOST}:${MINIO_PORT}
      AWS_ACCESS_KEY_ID: ${MINIO_ROOT_USER}
      AWS_SECRET_ACCESS_KEY: ${MINIO_ROOT_PASSWORD}
      AWS_REGION: us-east-1
      AZURE_STORAGE_ACCOUNT_NAME: ${AZURE_STORAGE_ACCOUNT_NAME}
      AZURE_STORAGE_ACCOUNT_ACCESS_KEY: ${AZURE_STORAGE_ACCOUNT_ACCESS_KEY}
    ports:
      - 8888:8888
      - 8081:8080
      - 4040:4040
      - 10000:10000
      - 10001:10001
    volumes:
      - /opt/warehouse:/home/iceberg/warehouse
      - ${SPARK_PROJ_DIR:-.}/notebooks:/home/iceberg/notebooks/notebooks
      - ${SPARK_PROJ_DIR:-.}/spark-defaults.conf:/opt/spark/conf/spark-defaults.conf
      - ${SPARK_PROJ_DIR:-.}/data:/opt/spark/data
    entrypoint: ["/bin/bash", "-c"]
    command: ["notebook"]
    networks:
      - datalakehouse-network
      
networks:
  datalakehouse-network:
    external: true