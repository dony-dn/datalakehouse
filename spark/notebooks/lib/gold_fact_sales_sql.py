sql_create_gold_internet_sales_header = """ 
CREATE TABLE IF NOT EXISTS gold.INTERNET_SALES_HEADER (
    CODE_SALES_ORDER_NUMBER STRING
    , ID_CUSTOMER STRING
    , DATE_ORDER DATE
    , DATE_DUE DATE
    , DATE_SHIP DATE
    , NAME_SALES_TERRITORY_REGION STRING
    , NAME_SALES_TERRITORY_COUNTRY STRING
    , NAME_SALES_TERRITORY_CONTINENT STRING
    , ID_CURRENCY STRING
    , TEXT_SOURCE_FILEPATH STRING
    , DATETIME_INGESTION TIMESTAMP
    , FLAG_ACTIVE BOOLEAN
    , DATETIME_INSERTED TIMESTAMP
    , DATETIME_UPDATED TIMESTAMP
)
USING iceberg
"""

sql_merge_gold_internet_sales_header = """ 
MERGE INTO gold.INTERNET_SALES_HEADER as target
--USING silver.SALES_HEADER as source
USING 
(
    SELECT 
        CODE_SALES_ORDER_NUMBER
        , ID_CUSTOMER
        , DATE_ORDER
        , DATE_DUE
        , DATE_SHIP
        , NAME_SALES_TERRITORY_REGION
        , NAME_SALES_TERRITORY_COUNTRY
        , NAME_SALES_TERRITORY_CONTINENT
        , ID_CURRENCY
        , TEXT_SOURCE_FILEPATH
        , DATETIME_INGESTION
        , TRUE AS FLAG_ACTIVE
        , CURRENT_TIMESTAMP AS DATETIME_INSERTED
        , CURRENT_TIMESTAMP AS DATETIME_UPDATED
    FROM 
        silver.SALES_HEADER
) as source
on
(
    target.CODE_SALES_ORDER_NUMBER = source.CODE_SALES_ORDER_NUMBER
)
WHEN MATCHED THEN UPDATE
SET
    target.ID_CUSTOMER = source.ID_CUSTOMER
    , target.DATE_ORDER = source.DATE_ORDER
    , target.DATE_DUE = source.DATE_DUE
    , target.DATE_SHIP = source.DATE_SHIP
    , target.NAME_SALES_TERRITORY_REGION = source.NAME_SALES_TERRITORY_REGION
    , target.NAME_SALES_TERRITORY_COUNTRY = source.NAME_SALES_TERRITORY_COUNTRY
    , target.NAME_SALES_TERRITORY_CONTINENT = source.NAME_SALES_TERRITORY_CONTINENT
    , target.ID_CURRENCY = source.ID_CURRENCY
    , target.TEXT_SOURCE_FILEPATH = source.TEXT_SOURCE_FILEPATH
    , target.DATETIME_INGESTION = source.DATETIME_INGESTION
    , target.FLAG_ACTIVE = source.FLAG_ACTIVE
    -- , target.DATETIME_INSERTED = CURRENT_TIMESTAMP
    , target.DATETIME_UPDATED = CURRENT_TIMESTAMP
WHEN NOT MATCHED THEN 
INSERT
(
    CODE_SALES_ORDER_NUMBER
    , ID_CUSTOMER
    , DATE_ORDER
    , DATE_DUE
    , DATE_SHIP
    , NAME_SALES_TERRITORY_REGION
    , NAME_SALES_TERRITORY_COUNTRY
    , NAME_SALES_TERRITORY_CONTINENT
    , ID_CURRENCY
    , TEXT_SOURCE_FILEPATH
    , DATETIME_INGESTION
    , FLAG_ACTIVE
    , DATETIME_INSERTED
    , DATETIME_UPDATED
)
VALUES
(
    source.CODE_SALES_ORDER_NUMBER
    , source.ID_CUSTOMER
    , source.DATE_ORDER
    , source.DATE_DUE
    , source.DATE_SHIP
    , source.NAME_SALES_TERRITORY_REGION
    , source.NAME_SALES_TERRITORY_COUNTRY
    , source.NAME_SALES_TERRITORY_CONTINENT
    , source.ID_CURRENCY
    , source.TEXT_SOURCE_FILEPATH
    , source.DATETIME_INGESTION
    , source.FLAG_ACTIVE
    , source.DATETIME_INSERTED
    , source.DATETIME_UPDATED
)
"""
#######################################################################################
sql_create_gold_internet_sales_detail = """ 
CREATE TABLE IF NOT EXISTS gold.INTERNET_SALES_DETAIL (
    CODE_SALES_ORDER_NUMBER STRING
    , NUM_SALES_LINE STRING
    , ID_PRODUCT STRING
    , NUM_ORDER_QUANTITY INT
    , AMT_SALES DOUBLE
    , AMT_TAX DOUBLE
    , NUM_FREIGHT DOUBLE
    , ID_CURRENCY STRING
    , TEXT_SOURCE_FILEPATH STRING
    , DATETIME_INGESTION TIMESTAMP
    , FLAG_ACTIVE BOOLEAN
    , DATETIME_INSERTED TIMESTAMP
    , DATETIME_UPDATED TIMESTAMP
)
USING iceberg
"""

sql_merge_gold_internet_sales_detail = """ 
MERGE INTO gold.INTERNET_SALES_DETAIL as target
USING 
(
    SELECT 
        CODE_SALES_ORDER_NUMBER
        , NUM_SALES_LINE
        , ID_PRODUCT
        , NUM_ORDER_QUANTITY
        , AMT_SALES
        , AMT_TAX
        , NUM_FREIGHT
        , ID_CURRENCY
        , TEXT_SOURCE_FILEPATH
        , DATETIME_INGESTION
        , TRUE AS FLAG_ACTIVE
        , CURRENT_TIMESTAMP AS DATETIME_INSERTED
        , CURRENT_TIMESTAMP AS DATETIME_UPDATED
    FROM 
        silver.SALES_DETAIL
) as source
on
(
    target.CODE_SALES_ORDER_NUMBER = source.CODE_SALES_ORDER_NUMBER
    and target.NUM_SALES_LINE = source.NUM_SALES_LINE
)
WHEN MATCHED THEN UPDATE
SET
    target.CODE_SALES_ORDER_NUMBER = source.CODE_SALES_ORDER_NUMBER
    , target.NUM_SALES_LINE = source.NUM_SALES_LINE
    , target.ID_PRODUCT = source.ID_PRODUCT
    , target.NUM_ORDER_QUANTITY = source.NUM_ORDER_QUANTITY
    , target.AMT_SALES = source.AMT_SALES
    , target.AMT_TAX = source.AMT_TAX
    , target.NUM_FREIGHT = source.NUM_FREIGHT
    , target.ID_CURRENCY = source.ID_CURRENCY
    , target.TEXT_SOURCE_FILEPATH = source.TEXT_SOURCE_FILEPATH
    , target.DATETIME_INGESTION = source.DATETIME_INGESTION
    -- , target.DATETIME_INSERTED = source.DATETIME_INSERTED
    , target.DATETIME_UPDATED = source.DATETIME_UPDATED
WHEN NOT MATCHED THEN 
INSERT
(
    CODE_SALES_ORDER_NUMBER
    , NUM_SALES_LINE
    , ID_PRODUCT
    , NUM_ORDER_QUANTITY
    , AMT_SALES
    , AMT_TAX
    , NUM_FREIGHT
    , ID_CURRENCY
    , TEXT_SOURCE_FILEPATH
    , DATETIME_INGESTION
    , DATETIME_INSERTED
    , DATETIME_UPDATED
)
VALUES
(
    source.CODE_SALES_ORDER_NUMBER
    , source.NUM_SALES_LINE
    , source.ID_PRODUCT
    , source.NUM_ORDER_QUANTITY
    , source.AMT_SALES
    , source.AMT_TAX
    , source.NUM_FREIGHT
    , source.ID_CURRENCY
    , source.TEXT_SOURCE_FILEPATH
    , source.DATETIME_INGESTION
    , source.DATETIME_INSERTED
    , source.DATETIME_UPDATED
)
"""