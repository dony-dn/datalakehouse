x-airflow-common:
  &airflow-common
  # In order to add custom dependencies or upgrade provider packages you can use your extended image.
  # Comment the image line, place your Dockerfile in the directory where you placed the docker-compose.yaml
  # and uncomment the "build" line below, Then run `docker-compose build` to build the images.
  image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.5.1}
  # build: .
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${AIRFLOW_DB_USER}:${AIRFLOW_DB_PASSWORD}@airflow-db/${AIRFLOW_DB_NAME}
    # For backward compatibility, with Airflow <2.3
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${AIRFLOW_DB_USER}:${AIRFLOW_DB_PASSWORD}@airflow-db/${AIRFLOW_DB_NAME}
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://${AIRFLOW_DB_USER}:${AIRFLOW_DB_PASSWORD}@airflow-db/${AIRFLOW_DB_NAME}
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
  volumes:
    - ${AIRFLOW_PROJ_DIR:-.}/airflow/dags:/opt/airflow/dags
    - ${AIRFLOW_PROJ_DIR:-.}/airflow/logs:/opt/airflow/logs
    - ${AIRFLOW_PROJ_DIR:-.}/airflow/plugins:/opt/airflow/plugins
    - ${AIRFLOW_PROJ_DIR:-.}/airflow/config:/opt/airflow/config
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    &airflow-common-depends-on
    redis:
      condition: service_healthy
    airflow-db:
      condition: service_healthy

services:
  airflow-db:
    image: postgres:13
    container_name: airflow-db
    environment:
      POSTGRES_USER: ${AIRFLOW_DB_USER}
      POSTGRES_PASSWORD: ${AIRFLOW_DB_PASSWORD}
      POSTGRES_DB: ${AIRFLOW_DB_NAME}
    volumes:
      - /opt/airflow/data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
    restart: always
    networks:
      - datalakehouse-network

  redis:
    image: redis:latest
    container_name: airflow-redis
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 30s
      retries: 50
    restart: always
    networks:
      - datalakehouse-network

  airflow-webserver:
    container_name: airflow-webserver
    <<: *airflow-common
    command: webserver
    ports:
      - 8080:8080
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - datalakehouse-network

  airflow-scheduler:
    container_name: airflow-scheduler
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"']
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - datalakehouse-network

  airflow-worker:
    container_name: airflow-worker
    <<: *airflow-common
    command: celery worker
    healthcheck:
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 10s
      timeout: 10s
      retries: 5
    environment:
      <<: *airflow-common-env
      # Required to handle warm shutdown of the celery workers properly
      # See https://airflow.apache.org/docs/docker-stack/entrypoint.html#signal-propagation
      DUMB_INIT_SETSID: "0"
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - datalakehouse-network

  airflow-triggerer:
    container_name: airflow-triggerer
    <<: *airflow-common
    command: triggerer
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - datalakehouse-network

  airflow-init:
    container_name: airflow-init
    <<: *airflow-common
    entrypoint: /bin/bash
    # yamllint disable rule:line-length
    command:
      - -c
      - |
        function ver() {
          printf "%04d%04d%04d%04d" $${1//./ }
        }
        airflow_version=$$(AIRFLOW__LOGGING__LOGGING_LEVEL=INFO && gosu airflow airflow version)
        airflow_version_comparable=$$(ver $${airflow_version})
        min_airflow_version=2.2.0
        min_airflow_version_comparable=$$(ver $${min_airflow_version})
        if (( airflow_version_comparable < min_airflow_version_comparable )); then
          echo
          echo -e "\033[1;31mERROR!!!: Too old Airflow version $${airflow_version}!\e[0m"
          echo "The minimum Airflow version supported: $${min_airflow_version}. Only use this or higher!"
          echo
          exit 1
        fi
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          echo "If you are on Linux, you SHOULD follow the instructions below to set "
          echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
          echo "For other operating systems you can get rid of the warning with manually created .env file:"
          echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user"
          echo
        fi
        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"
        if (( mem_available < 4000 )) ; then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
          echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
          echo
          warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
          echo "At least 2 CPUs recommended. You have $${cpus_available}"
          echo
          warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
          echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
          echo
          warning_resources="true"
        fi
        if [[ $${warning_resources} == "true" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
          echo "Please follow the instructions to increase amount of resources available:"
          echo "   https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin"
          echo
        fi
        mkdir -p /sources/logs /sources/dags /sources/plugins
        chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
        exec /entrypoint airflow version
    # yamllint enable rule:line-length
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
      _PIP_ADDITIONAL_REQUIREMENTS: ''
    user: "0:0"
    volumes:
      - ${AIRFLOW_PROJ_DIR:-.}/airflow:/sources
    networks:
      - datalakehouse-network

  airflow-cli:
    container_name: airflow-cli
    <<: *airflow-common
    profiles:
      - debug
    environment:
      <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: "0"
    # Workaround for entrypoint issue. See: https://github.com/apache/airflow/issues/16252
    command:
      - bash
      - -c
      - airflow
    networks:
      - datalakehouse-network

  # You can enable flower by adding "--profile flower" option e.g. docker-compose --profile flower up
  # or by explicitly targeted on the command line e.g. docker-compose up flower.
  # See: https://docs.docker.com/compose/profiles/
  flower:
    container_name: flower
    <<: *airflow-common
    command: celery flower
    profiles:
      - flower
    ports:
      - 5555:5555
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - datalakehouse-network

#################################################################
# MinIO
#################################################################
  minio:
    image: minio/minio
    container_name: minio
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    volumes:
      - /opt/minio/data:/data
    networks:
      - datalakehouse-network


#################################################################
# MinIO Client
#################################################################
  mc:
    depends_on:
      minio:
        condition: service_healthy
    image: minio/mc
    container_name: mc
    environment:
      AWS_ACCESS_KEY_ID: ${MINIO_ROOT_USER}
      AWS_SECRET_ACCESS_KEY: ${MINIO_ROOT_PASSWORD}
      AWS_REGION: us-east-1
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set minio http://minio:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD};

      if /usr/bin/mc ls minio | grep -q \"warehouse\"; then
          echo \"Bucket 'warehouse' already exists.\"
          /usr/bin/mc rm -r --force minio/warehouse
      else
          echo \"Creating bucket 'warehouse'...\"
          /usr/bin/mc mb minio/warehouse
          echo \"Bucket 'warehouse' created successfully.\"
          /usr/bin/mc anonymous set public minio/warehouse
      fi;

      if /usr/bin/mc ls minio | grep -q \"seed\"; then
          echo \"Bucket 'seed' already exists.\"
          /usr/bin/mc rm -r --force minio/seed
      else
          echo \"Creating bucket 'seed'...\"
          /usr/bin/mc mb minio/seed
          echo \"Bucket 'seed' created successfully.\"
          /usr/bin/mc anonymous set public minio/seed
      fi;
      exit 0;
      "      
    networks:
      - datalakehouse-network
      
#################################################################
# Apache Nifi
#################################################################

  nifi:
    image: apache/nifi:latest
    restart: always
    container_name: nifi
    ports:
      - 8180:8080
    environment:
      NIFI_WEB_HTTP_PORT: 8080
    # volumes:
      # - ./nifi/conf:/opt/nifi/nifi-current/conf

#################################################################
# Nessie Postgresql
#################################################################
  nessie-db:
    image: postgres:latest
    container_name: nessie-db
    environment:
      POSTGRES_DB: ${NESSIE_DB_NAME}
      POSTGRES_USER: ${NESSIE_DB_USER}
      POSTGRES_PASSWORD: ${NESSIE_DB_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - /opt/nessie/data:/var/lib/postgresql/data
    networks:
      - datalakehouse-network

#################################################################
# Nessie
#################################################################
  nessie:
    image: projectnessie/nessie
    container_name: nessie
    ports:
      - "19120:19120"
    environment:
      NESSIE_VERSION_STORE_TYPE: JDBC
      QUARKUS_DATASOURCE_JDBC_URL: jdbc:postgresql://nessie-db:5432/${NESSIE_DB_NAME}
      QUARKUS_DATASOURCE_USERNAME: ${NESSIE_DB_USER}
      QUARKUS_DATASOURCE_PASSWORD: ${NESSIE_DB_PASSWORD}
      # nessie.version.store.type: IN_MEMORY
      nessie.catalog.default-warehouse: warehouse
      nessie.catalog.warehouses.warehouse.location: s3a://warehouse/
      nessie.catalog.service.s3.default-options.endpoint: http://minio:9000/
      nessie.catalog.service.s3.default-options.path-style-access: true
      nessie.catalog.service.s3.default-options.access-key: urn:nessie-secret:quarkus:nessie.catalog.secrets.access-key
      nessie.catalog.secrets.access-key.name: ${MINIO_ROOT_USER}
      nessie.catalog.secrets.access-key.secret: ${MINIO_ROOT_PASSWORD}
      nessie.catalog.service.s3.default-options.region: us-east-1
      nessie.server.authentication.enabled: false
    depends_on:
      - minio
      - nessie-db
    networks:
      - datalakehouse-network

#################################################################
# spark-iceberg
#################################################################
  spark-iceberg:
    container_name: spark-iceberg
    image: my-spark-iceberg
    build:
      context: spark
      dockerfile: Dockerfile
    environment:
      CATALOG_TYPE: nessie
      NESSIE_URI: http://nessie:19120/api/v2
      WAREHOUSE: s3a://warehouse/
      AWS_S3_ENDPOINT: http://minio:9000
      AWS_ACCESS_KEY_ID: ${MINIO_ROOT_USER}
      AWS_SECRET_ACCESS_KEY: ${MINIO_ROOT_PASSWORD}
      AWS_REGION: us-east-1
      AZURE_STORAGE_ACCOUNT_NAME: ${AZURE_STORAGE_ACCOUNT_NAME}
      AZURE_STORAGE_ACCOUNT_ACCESS_KEY: ${AZURE_STORAGE_ACCOUNT_ACCESS_KEY}
    ports:
      - 8888:8888
      - 8081:8080
      - 4040:4040
      - 10000:10000
      - 10001:10001
    volumes:
      - /opt/warehouse:/home/iceberg/warehouse
      - ${SPARK_PROJ_DIR:-.}/notebooks:/home/iceberg/notebooks/notebooks
    entrypoint: ["/bin/bash", "-c"]
    command: ["notebook"]
    depends_on:
      - rest
      - minio
      - nessie
    networks:
      - datalakehouse-network

#################################################################
# iceberg-rest
#################################################################
  rest:
    image: apache/iceberg-rest-fixture
    container_name: iceberg-rest
    ports:
      - 8181:8181
    environment:
      AWS_ACCESS_KEY_ID: ${ICEBERG_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${ICEBERG_SECRET_ACCESS_KEY}
      AWS_REGION: us-east-1
      CATALOG_WAREHOUSE: s3://warehouse/
      CATALOG_IO__IMPL: org.apache.iceberg.aws.s3.S3FileIO
      CATALOG_S3_ENDPOINT: http://minio:9000
    networks:
      - datalakehouse-network

#################################################################
# superset-db
#################################################################
  superset-db:
    image: postgres:latest
    container_name: superset-db 
    environment:
      POSTGRES_USER: ${SUPERSET_ADMIN_USER}
      POSTGRES_PASSWORD: ${SUPERSET_ADMIN_PASS}
      POSTGRES_DB: superset
    volumes:
      - /opt/superset/data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    networks:
      - datalakehouse-network

#################################################################
# superset
#################################################################
  superset:
    build:
      context: ./superset
      dockerfile: dockerfile
    container_name: superset
    depends_on:
      - superset-db
    environment:
      SUPERSET_ADMIN_USER: ${SUPERSET_ADMIN_USER}
      SUPERSET_ADMIN_EMAIL: admin@superset.com
      SUPERSET_ADMIN_PASS: ${SUPERSET_ADMIN_PASS}
      SUPERSET_CONFIG_PATH: /app/superset_config.py
      SQLALCHEMY_DATABASE_URI: postgresql://${SUPERSET_ADMIN_USER}:${SUPERSET_ADMIN_PASS}@superset-db:5433/superset
    ports:
      - '8088:8088'
    networks:
      - datalakehouse-network

#################################################################
# dremio
#################################################################
  dremio:
    image: bitnami/dremio:latest
    container_name: dremio
    ports:  
      - 9047:9047 
      - 31010:31010 
      - 45678:45678
    depends_on:
      - nessie
      - minio
    volumes:
      - /opt/dremio/data:/opt/dremio/data
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    networks:
      - datalakehouse-network

networks:
  datalakehouse-network:
    external: true